1.

package assign4;

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SinglyLinkedList {
    private Node head;
    private Node tail;

    public SinglyLinkedList() {
        this.head = null;
        this.tail = null;
    }

    // Add a node to the beginning of the list
    public void addFirst(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
    }

    // Add a node to the end of the list
    public void addLast(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    // Delete the first node 
    public void delFirst() {
        if (!isEmpty()) {
            head = head.next;
            if (head == null) {
                tail = null; 
            }
        }
    }

    // Delete the last node
    public void delLast() {
        if (!isEmpty()) {
            if (head == tail) {
                head = tail = null; // If there's only one
            } else {
                Node current = head;
                while (current.next != tail) {
                    current = current.next;
                }
                current.next = null;
                tail = current;
            }
        }
    }

    // Display 
    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    private boolean isEmpty() {
        return head == null;
    }
}

public class ans1 {
    public static void main(String[] args) {
        SinglyLinkedList linkedList = new SinglyLinkedList();

        linkedList.addFirst(3);
        linkedList.addFirst(2);
        linkedList.addFirst(1);

        linkedList.display(); //  1 2 3

        linkedList.addLast(4);
        linkedList.addLast(5);

        linkedList.display(); // 1 2 3 4 5

        linkedList.delFirst();
        linkedList.delLast();

        linkedList.display(); // 2 3 4
    }
}

2.

package assign4;

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SinglyLinkedList {
    Node head;
    private Node tail;

    public SinglyLinkedList() {
        this.head = null;
        this.tail = null;
    }

    // Add a node to the beginning of the list
    public void addFirst(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
    }

    // Add a node to the end of the list
    public void addLast(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    // Delete the first node 
    public void delFirst() {
        if (!isEmpty()) {
            head = head.next;
            if (head == null) {
                tail = null; 
            }
        }
    }

    // Delete the last node
    public void delLast() {
        if (!isEmpty()) {
            if (head == tail) {
                head = tail = null; // If there's only one
            } else {
                Node current = head;
                while (current.next != tail) {
                    current = current.next;
                }
                current.next = null;
                tail = current;
            }
        }
    }

    // Display 
    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    private boolean isEmpty() {
        return head == null;
    }

/*
public class ans1 {
    public static void main(String[] args) {
        SinglyLinkedList linkedList = new SinglyLinkedList();

        linkedList.addFirst(3);
        linkedList.addFirst(2);
        linkedList.addFirst(1);

        linkedList.display(); //  1 2 3

        linkedList.addLast(4);
        linkedList.addLast(5);

        linkedList.display(); // 1 2 3 4 5

        linkedList.delFirst();
        linkedList.delLast();

        linkedList.display(); // 2 3 4
    }*/
////
    public void insertAfter(Node previousNode, int data) {
        if (previousNode == null) {
            System.out.println("Previous node cannot be null.");
            return;
        }

        Node newNode = new Node(data);
        newNode.next = previousNode.next;
        previousNode.next = newNode;

        if (previousNode == tail) {
            tail = newNode;
        }
    }

    // Insert a new node before a given node
    public void insertBefore(Node nextNode, int data) {
        if (nextNode == null || head == null) {
            System.out.println("Next node cannot be null, and the list should not be empty.");
            return;
        }

        Node newNode = new Node(data);

        if (head == nextNode) {
            newNode.next = head;
            head = newNode;
        } else {
            Node current = head;
            while (current != null && current.next != nextNode) {
                current = current.next;
            }

            if (current == null) {
                System.out.println("Given next node not found in the list.");
                return;
            }

            newNode.next = current.next;
            current.next = newNode;
        }
    }
}

public class ans1 {
    public static void main(String[] args) {
        SinglyLinkedList linkedList = new SinglyLinkedList();

        linkedList.addFirst(3);
        linkedList.addFirst(2);
        linkedList.addFirst(1);

        linkedList.display(); // Output: 1 2 3

        Node node2 = linkedList.head.next; // Node with data 2
        linkedList.insertAfter(node2, 4);

        linkedList.display(); // Output: 1 2 4 3

        Node node1 = linkedList.head; // Node with data 1
        linkedList.insertBefore(node1, 5);

        linkedList.display(); // Output: 5 1 2 4 3
    }
}


3.

package assign4;

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SinglyLinkedList {
    Node head;
    private Node tail;

    public SinglyLinkedList() {
        this.head = null;
        this.tail = null;
    }

    // Add a node to the beginning of the list
    public void addFirst(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
    }

    // Add a node to the end of the list
    public void addLast(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    // Delete the first node 
    public void delFirst() {
        if (!isEmpty()) {
            head = head.next;
            if (head == null) {
                tail = null; 
            }
        }
    }

    // Delete the last node
    public void delLast() {
        if (!isEmpty()) {
            if (head == tail) {
                head = tail = null; // If there's only one
            } else {
                Node current = head;
                while (current.next != tail) {
                    current = current.next;
                }
                current.next = null;
                tail = current;
            }
        }
    }

    // Display 
    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    private boolean isEmpty() {
        return head == null;
    }

/*
public class ans1 {
    public static void main(String[] args) {
        SinglyLinkedList linkedList = new SinglyLinkedList();

        linkedList.addFirst(3);
        linkedList.addFirst(2);
        linkedList.addFirst(1);

        linkedList.display(); //  1 2 3

        linkedList.addLast(4);
        linkedList.addLast(5);

        linkedList.display(); // 1 2 3 4 5

        linkedList.delFirst();
        linkedList.delLast();

        linkedList.display(); // 2 3 4
    }*/
////
    public void insertAfter(Node previousNode, int data) {
        if (previousNode == null) {
            System.out.println("Previous node cannot be null.");
            return;
        }

        Node newNode = new Node(data);
        newNode.next = previousNode.next;
        previousNode.next = newNode;

        if (previousNode == tail) {
            tail = newNode;
        }
    }

    // Insert a new node before a given node
    public void insertBefore(Node nextNode, int data) {
        if (nextNode == null || head == null) {
            System.out.println("Next node cannot be null, and the list should not be empty.");
            return;
        }

        Node newNode = new Node(data);

        if (head == nextNode) {
            newNode.next = head;
            head = newNode;
        } else {
            Node current = head;
            while (current != null && current.next != nextNode) {
                current = current.next;
            }

            if (current == null) {
                System.out.println("Given next node not found in the list.");
                return;
            }

            newNode.next = current.next;
            current.next = newNode;
        }
    }

/*
public class ans1 {
    public static void main(String[] args) {
        SinglyLinkedList linkedList = new SinglyLinkedList();

        linkedList.addFirst(3);
        linkedList.addFirst(2);
        linkedList.addFirst(1);

        linkedList.display(); // Output: 1 2 3

        Node node2 = linkedList.head.next; // Node with data 2
        linkedList.insertAfter(node2, 4);

        linkedList.display(); // Output: 1 2 4 3

        Node node1 = linkedList.head; // Node with data 1
        linkedList.insertBefore(node1, 5);

        linkedList.display(); // Output: 5 1 2 4 3
    }
    */
    
    ///
    
    public void displayReverse() {
        displayReverseHelper(head);
        System.out.println();
    }

    //elements in reverse order 
    private void displayReverseHelper(Node node) {
        if (node == null) {
            return;
        }

        displayReverseHelper(node.next);
        System.out.print(node.data + " ");
    }
}

public class ans1 {
    public static void main(String[] args) {
        SinglyLinkedList linkedList = new SinglyLinkedList();

        linkedList.addFirst(3);
        linkedList.addFirst(2);
        linkedList.addFirst(1);

        linkedList.display(); // Output: 1 2 3

        linkedList.displayReverse(); // Output: 3 2 1
    }
}


4.


package assign4;

class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SinglyLinkedList {
    Node head;
    private Node tail;

    public SinglyLinkedList() {
        this.head = null;
        this.tail = null;
    }

    // Add a node to the beginning of the list
    public void addFirst(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
    }

    // Add a node to the end of the list
    public void addLast(int data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
    }

    // Delete the first node 
    public void delFirst() {
        if (!isEmpty()) {
            head = head.next;
            if (head == null) {
                tail = null; 
            }
        }
    }

    // Delete the last node
    public void delLast() {
        if (!isEmpty()) {
            if (head == tail) {
                head = tail = null; // If there's only one
            } else {
                Node current = head;
                while (current.next != tail) {
                    current = current.next;
                }
                current.next = null;
                tail = current;
            }
        }
    }

    // Display 
    public void display() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    private boolean isEmpty() {
        return head == null;
    }

/*
public class ans1 {
    public static void main(String[] args) {
        SinglyLinkedList linkedList = new SinglyLinkedList();

        linkedList.addFirst(3);
        linkedList.addFirst(2);
        linkedList.addFirst(1);

        linkedList.display(); //  1 2 3

        linkedList.addLast(4);
        linkedList.addLast(5);

        linkedList.display(); // 1 2 3 4 5

        linkedList.delFirst();
        linkedList.delLast();

        linkedList.display(); // 2 3 4
    }*/
////
    public void insertAfter(Node previousNode, int data) {
        if (previousNode == null) {
            System.out.println("Previous node cannot be null.");
            return;
        }

        Node newNode = new Node(data);
        newNode.next = previousNode.next;
        previousNode.next = newNode;

        if (previousNode == tail) {
            tail = newNode;
        }
    }

    // Insert a new node before a given node
    public void insertBefore(Node nextNode, int data) {
        if (nextNode == null || head == null) {
            System.out.println("Next node cannot be null, and the list should not be empty.");
            return;
        }

        Node newNode = new Node(data);

        if (head == nextNode) {
            newNode.next = head;
            head = newNode;
        } else {
            Node current = head;
            while (current != null && current.next != nextNode) {
                current = current.next;
            }

            if (current == null) {
                System.out.println("Given next node not found in the list.");
                return;
            }

            newNode.next = current.next;
            current.next = newNode;
        }
    }

/*
public class ans1 {
    public static void main(String[] args) {
        SinglyLinkedList linkedList = new SinglyLinkedList();

        linkedList.addFirst(3);
        linkedList.addFirst(2);
        linkedList.addFirst(1);

        linkedList.display(); // Output: 1 2 3

        Node node2 = linkedList.head.next; // Node with data 2
        linkedList.insertAfter(node2, 4);

        linkedList.display(); // Output: 1 2 4 3

        Node node1 = linkedList.head; // Node with data 1
        linkedList.insertBefore(node1, 5);

        linkedList.display(); // Output: 5 1 2 4 3
    }
    */
    
    ///
    
    public void displayReverse() {
        displayReverseHelper(head);
        System.out.println();
    }

    //elements in reverse order 
    private void displayReverseHelper(Node node) {
        if (node == null) {
            return;
        }

        displayReverseHelper(node.next);
        System.out.print(node.data + " ");
    }

/*
public class ans1 {
    public static void main(String[] args) {
        SinglyLinkedList linkedList = new SinglyLinkedList();

        linkedList.addFirst(3);
        linkedList.addFirst(2);
        linkedList.addFirst(1);

        linkedList.display(); // Output: 1 2 3

        linkedList.displayReverse(); // Output: 3 2 1
    }
}
*/
// Insert a value in sorted order
public void insertInSortedOrder(int data) {
    Node newNode = new Node(data);

    if (head == null || data < head.data) {
        // If the list is empty or the new node has the smallest value
        newNode.next = head;
        head = newNode;
        if (tail == null) {
            tail = newNode; // Update tail for an empty list
        }
    } else {
        Node current = head;

        // Traverse the list to find the appropriate position
        while (current.next != null && data > current.next.data) {
            current = current.next;
        }

        newNode.next = current.next;
        current.next = newNode;

        if (newNode.next == null) {
            tail = newNode; // Update tail for inserting at the end
        }
    }
}
}

public class ans1 {
public static void main(String[] args) {
    SinglyLinkedList linkedList = new SinglyLinkedList();

    linkedList.insertInSortedOrder(3);
    linkedList.insertInSortedOrder(1);
    linkedList.insertInSortedOrder(4);
    linkedList.insertInSortedOrder(2);

    linkedList.display(); // Output: 1 2 3 4
}}
